--!strict

local Library = {}

-- Helper function to create a basic frame
local function createBaseFrame(name, size, position, color, transparency, cornerRadius)
    local frame = Instance.new("Frame")
    frame.Name = name or "Frame"
    frame.Size = size or UDim2.new(0, 200, 0, 100)
    frame.Position = position or UDim2.fromScale(0.5, 0.5)
    frame.AnchorPoint = Vector2.new(0.5, 0.5)
    frame.BackgroundColor3 = color or Color3.fromRGB(40, 40, 40)
    frame.BackgroundTransparency = transparency or 0
    frame.BorderSizePixel = 0

    if cornerRadius then
        local corner = Instance.new("UICorner")
        corner.CornerRadius = UDim.new(0, cornerRadius)
        corner.Parent = frame
    end

    return frame
end

-- Helper function to create a basic text label
local function createTextLabel(name, text, size, position, color, transparency, textSize, font, xAlignment)
    local label = Instance.new("TextLabel")
    label.Name = name or "Label"
    label.Text = text or "TextLabel"
    label.Size = size or UDim2.new(1, 0, 1, 0)
    label.Position = position or UDim2.new(0, 0, 0, 0)
    label.TextColor3 = color or Color3.fromRGB(200, 200, 200)
    label.BackgroundTransparency = transparency or 1
    label.TextSize = textSize or 14
    label.Font = font or Enum.Font.Gotham
    label.TextXAlignment = xAlignment or Enum.TextXAlignment.Left
    label.TextScaled = false
    label.ClipsDescendants = true
    return label
end

-- Main library creation function
function Library:Create(config)
    config = config or {}
    local mainGui = Instance.new("ScreenGui")
    mainGui.Name = config.Name or "SimpleUI"
    mainGui.Parent = game.CoreGui

    local mainWindow = createBaseFrame(
        "MainWindow",
        config.Size or UDim2.new(0, 300, 0, 400),
        UDim2.fromScale(0.5, 0.5),
        Color3.fromRGB(30, 30, 30),
        0,
        6
    )
    mainWindow.Parent = mainGui

    local titleBar = createBaseFrame("TitleBar", UDim2.new(1, 0, 0, 30), UDim2.new(0, 0, 0, 0), Color3.fromRGB(40, 40, 40), 0, 6)
    titleBar.Size = UDim2.new(1, 0, 0, 30)
    titleBar.Position = UDim2.new(0, 0, 0, 0)
    titleBar.AnchorPoint = Vector2.new(0, 0)
    titleBar.Parent = mainWindow

    local titleLabel = createTextLabel("TitleLabel", config.Name or "SimpleUI", UDim2.new(1, -40, 1, 0), UDim2.new(0, 10, 0, 0))
    titleLabel.TextYAlignment = Enum.TextYAlignment.Center
    titleLabel.Parent = titleBar

    -- Close button
    local closeButton = createTextLabel("CloseButton", "X", UDim2.new(0, 30, 1, 0), UDim2.new(1, -35, 0, 0), Color3.fromRGB(255, 50, 50))
    closeButton.TextXAlignment = Enum.TextXAlignment.Center
    closeButton.TextYAlignment = Enum.TextYAlignment.Center
    closeButton.Size = UDim2.new(0, 30, 1, 0)
    closeButton.Position = UDim2.new(1, -35, 0, 0)
    closeButton.Font = Enum.Font.SourceSansBold
    closeButton.TextSize = 18
    closeButton.Parent = titleBar

    local closeButtonHoverTween = game:GetService("TweenService"):Create(closeButton, TweenInfo.new(0.1), {TextColor3 = Color3.fromRGB(255, 100, 100)})
    local closeButtonLeaveTween = game:GetService("TweenService"):Create(closeButton, TweenInfo.new(0.1), {TextColor3 = Color3.fromRGB(255, 50, 50)})

    closeButton.MouseEnter:Connect(function() closeButtonHoverTween:Play() end)
    closeButton.MouseLeave:Connect(function() closeButtonLeaveTween:Play() end)

    closeButton.MouseButton1Click:Connect(function()
        mainGui:Destroy()
    end)

    -- Content area (This will now hold sections directly)
    local contentFrame = createBaseFrame("ContentFrame", UDim2.new(1, 0, 1, -30), UDim2.new(0, 0, 0, 30), Color3.fromRGB(50, 50, 50), 0)
    contentFrame.Size = UDim2.new(1, 0, 1, -30)
    contentFrame.Position = UDim2.new(0, 0, 0, 30)
    contentFrame.AnchorPoint = Vector2.new(0, 0)
    contentFrame.BackgroundTransparency = 1
    contentFrame.Parent = mainWindow

    local contentLayout = Instance.new("UIListLayout")
    contentLayout.Name = "ContentLayout"
    contentLayout.FillDirection = Enum.FillDirection.Vertical
    contentLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
    contentLayout.Padding = UDim.new(0, 5)
    contentLayout.Parent = contentFrame

    local contentPadding = Instance.new("UIPadding")
    contentPadding.Name = "ContentPadding"
    contentPadding.PaddingLeft = UDim.new(0, 10)
    contentPadding.PaddingRight = UDim.new(0, 10)
    contentPadding.PaddingTop = UDim.new(0, 10)
    contentPadding.PaddingBottom = UDim.new(0, 10)
    contentPadding.Parent = contentFrame

    local function updateContentSize()
        local size = contentLayout.AbsoluteContentSize
        contentFrame.CanvasSize = UDim2.new(0, 0, 0, size.Y + contentPadding.PaddingBottom.Offset + contentPadding.PaddingTop.Offset)
    end

    -- Observe changes to update canvas size
    contentLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(updateContentSize)
    contentFrame.ChildAdded:Connect(updateContentSize)
    contentFrame.ChildRemoved:Connect(updateContentSize)


    local uiHandler = {}

    function uiHandler:Section(title)
        local sectionFrame = createBaseFrame("Section", UDim2.new(1, 0, 0, 0), nil, Color3.fromRGB(35, 35, 35), 0, 4)
        sectionFrame.AutomaticSize = Enum.AutomaticSize.Y
        sectionFrame.Parent = contentFrame

        local sectionTitle = createTextLabel("SectionTitle", title or "Section", UDim2.new(1, 0, 0, 20), UDim2.new(0, 10, 0, 0))
        sectionTitle.TextYAlignment = Enum.TextYAlignment.Center
        sectionTitle.TextColor3 = Color3.fromRGB(180, 180, 180)
        sectionTitle.TextSize = 11
        sectionTitle.Parent = sectionFrame

        local sectionLayout = Instance.new("UIListLayout")
        sectionLayout.Name = "SectionLayout"
        sectionLayout.FillDirection = Enum.FillDirection.Vertical
        sectionLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
        sectionLayout.Padding = UDim.new(0, 3)
        sectionLayout.Parent = sectionFrame

        local sectionPadding = Instance.new("UIPadding")
        sectionPadding.Name = "SectionPadding"
        sectionPadding.PaddingLeft = UDim.new(0, 10)
        sectionPadding.PaddingRight = UDim.new(0, 10)
        sectionPadding.PaddingTop = UDim.new(0, 5)
        sectionPadding.PaddingBottom = UDim.new(0, 5)
        sectionPadding.Parent = sectionFrame

        -- Observe changes to update section size
        sectionLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
             sectionFrame.Size = UDim2.new(1, 0, 0, sectionLayout.AbsoluteContentSize.Y + sectionPadding.PaddingBottom.Offset + sectionPadding.PaddingTop.Offset + sectionTitle.Size.Y.Offset)
             updateContentSize() -- Update main content frame size as well
        end)
        sectionFrame.ChildAdded:Connect(function() task.wait() sectionLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Fire() end)
        sectionFrame.ChildRemoved:Connect(function() task.wait() sectionLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Fire() end)


        local elementHandler = {}

        function elementHandler:Button(text, callback)
            local button = createBaseFrame("Button", UDim2.new(1, 0, 0, 25), nil, Color3.fromRGB(50, 50, 50), 0, 4)
            button.Parent = sectionFrame

            local buttonLabel = createTextLabel("ButtonLabel", text or "Button", UDim2.new(1, -20, 1, 0), UDim2.new(0, 10, 0, 0))
            buttonLabel.TextYAlignment = Enum.TextYAlignment.Center
            buttonLabel.Parent = button

            local buttonHoverTween = game:GetService("TweenService"):Create(button, TweenInfo.new(0.1), {BackgroundColor3 = Color3.fromRGB(60, 60, 60)})
            local buttonLeaveTween = game:GetService("TweenService"):Create(button, TweenInfo.new(0.1), {BackgroundColor3 = Color3.fromRGB(50, 50, 50)})

            button.MouseEnter:Connect(function() buttonHoverTween:Play() end)
            button.MouseLeave:Connect(function() buttonLeaveTween:Play() end)

            button.MouseButton1Click:Connect(function()
                if callback then callback() end
            end)

            -- Adjust section size after adding button
             task.wait() sectionLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Fire()
        end

        function elementHandler:Toggle(text, callback)
            local toggle = createBaseFrame("Toggle", UDim2.new(1, 0, 0, 25), nil, Color3.fromRGB(50, 50, 50), 0, 4)
            toggle.Parent = sectionFrame

            local toggleLabel = createTextLabel("ToggleLabel", text or "Toggle", UDim2.new(1, -30, 1, 0), UDim2.new(0, 10, 0, 0))
            toggleLabel.TextYAlignment = Enum.TextYAlignment.Center
            toggleLabel.Parent = toggle

            local statusFrame = createBaseFrame("StatusFrame", UDim2.new(0, 20, 0, 15), UDim2.new(1, -25, 0.5), Color3.fromRGB(80, 80, 80), 0, 3)
            statusFrame.AnchorPoint = Vector2.new(1, 0.5)
            statusFrame.Parent = toggle

            local toggleState = false

            local toggleOnColor = Color3.fromRGB(50, 200, 50)
            local toggleOffColor = Color3.fromRGB(80, 80, 80)

            local toggleHoverTween = game:GetService("TweenService"):Create(toggle, TweenInfo.new(0.1), {BackgroundColor3 = Color3.fromRGB(60, 60, 60)})
            local toggleLeaveTween = game:GetService("TweenService"):Create(toggle, TweenInfo.new(0.1), {BackgroundColor3 = Color3.fromRGB(50, 50, 50)})
            local statusColorTween = game:GetService("TweenService"):Create(statusFrame, TweenInfo.new(0.1), {BackgroundColor3 = toggleOffColor})

            toggle.MouseEnter:Connect(function() toggleHoverTween:Play() end)
            toggle.MouseLeave:Connect(function() toggleLeaveTween:Play() end)

            toggle.MouseButton1Click:Connect(function()
                toggleState = not toggleState
                if toggleState then
                    statusColorTween = game:GetService("TweenService"):Create(statusFrame, TweenInfo.new(0.1), {BackgroundColor3 = toggleOnColor})
                    statusColorTween:Play()
                else
                    statusColorTween = game:GetService("TweenService"):Create(statusFrame, TweenInfo.new(0.1), {BackgroundColor3 = toggleOffColor})
                    statusColorTween:Play()
                end
                if callback then callback(toggleState) end
            end)

             -- Adjust section size after adding toggle
             task.wait() sectionLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Fire()
        end

        return elementHandler
    end

    return uiHandler
end

return Library
